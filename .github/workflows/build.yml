name: Build/Test/Verify/Release
on: [push, pull_request_target]
env:
  ROM_VERSION: v0.16.0
  KERNEL_VERSION: v0.16.0
  LINUX_VERSION: 5.15.63-ctsi-2
  ROOTFS_VERSION: v0.17.0
  TEST_VERSION: v0.28.0
  GROUND_TRUTH_VERSION: v0.28.0-0001
  BUILD_CACHE_VERSION: v0.10.0-0006
jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libreadline-dev libboost-context-dev libboost-coroutine-dev libboost-filesystem-dev libssl-dev libc-ares-dev zlib1g-dev ca-certificates patchelf automake cmake clang-tidy-14 clang-format-14 lua5.4 liblua5.4-dev lua-socket libb64-dev libcrypto++-dev nlohmann-json3-dev

      - name: Download cache of third-party build
        run: aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION} ./build && test -f ./build/`uname`_`uname -m`/lib/libcryptopp.so.7
        id: download_cache
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build third-party dependencies
        id: build_dep
        if: ${{ steps.download_cache.outcome == 'failure' }}
        run: make -j$(nproc) dep

      - name: Fix build dependencies permissions
        run: chmod +x ./build/`uname`_`uname -m`/bin/protoc ./build/`uname`_`uname -m`/bin/grpc_cpp_plugin

      - name: Cache third-party build
        if: ${{ steps.build_dep.outcome == 'success' }}
        run: aws s3 sync ./build s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build
        run: make -j$(nproc) release=${{ (startsWith(github.ref, 'refs/tags/v') && 'yes' || 'no') }} git_commit=${GITHUB_SHA}

      - name: Build uarch-based interpreter
        run: make uarch-with-toolchain

      - name: Install [/opt/cartesi]
        run: make install

      - name: Fix install permissions [/opt/cartesi]
        run: find /opt/cartesi -type d -exec chmod 755 {} +

      - name: Upload emulator
        uses: actions/upload-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

      - name: Upload emulator tests
        uses: actions/upload-artifact@master
        with:
          name: emulator-tests
          path: src/tests

  test:
    name: Test
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Install Ubuntu dependencies
        run: sudo apt-get update -y && sudo apt-get install -y libboost-context1.74.0 libboost-coroutine1.74.0 libboost-filesystem1.74.0 libssl1.1 libc-ares2 zlib1g netcat patchelf lua5.4 lua-socket liblua5.4-dev luarocks libb64-dev libcrypto++-dev nlohmann-json3-dev

      - name: Install lua test dependencies
        run: |
          sudo luarocks install --lua-version=5.4 md5
          sudo luarocks install --lua-version=5.4 luaposix

      - name: Download emulator
        uses: actions/download-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

      - name: Download emulator tests
        uses: actions/download-artifact@master
        with:
          name: emulator-tests
          path: tests

      - name: Create images folder
        run: mkdir -m 755 -p /opt/cartesi/share/images

      - name: Fix install directories and permissions [/opt/cartesi, ./tests]
        run: |
          find /opt/cartesi -type d -exec chmod 755 {} +
          find /opt/cartesi -type f -exec chmod 644 {} +
          find /opt/cartesi/bin -type f \! -iname "*.lua" -exec chmod 755 {} +
          find /opt/cartesi/lib -type f -exec chmod 755 {} +
          find ./tests/ -type f -name "*.lua" -exec chmod 755 {} +
          chmod 755 ./tests/test-merkle-tree-hash ./tests/test-machine-c-api ./tests/test-grpc-server.sh ./tests/test-jsonrpc-server.sh
          patchelf --set-rpath /opt/cartesi/lib ./tests/test-merkle-tree-hash
          patchelf --set-rpath /opt/cartesi/lib ./tests/test-machine-c-api

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs-${{ env.ROOTFS_VERSION }}.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: linux-${{ env.LINUX_VERSION }}.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom-${{ env.ROM_VERSION }}.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Move images to cartesi images folder
        run: |
          mv rom-*.bin linux-*.bin rootfs-*.ext2 /opt/cartesi/share/images/
          cd /opt/cartesi/share/images/ && ln -s linux-${{ env.LINUX_VERSION }}.bin linux.bin
          cd /opt/cartesi/share/images/ && ln -s rom-${{ env.ROM_VERSION }}.bin rom.bin
          cd /opt/cartesi/share/images/ && ln -s rootfs-${{ env.ROOTFS_VERSION }}.ext2 rootfs.ext2

      - name: Simple Boot
        run: /opt/cartesi/bin/cartesi-machine /bin/true

      - name: Save and Load
        run: |
          /opt/cartesi/bin/cartesi-machine --max-mcycle=0 --rollup --store=/tmp/save_and_load_test
          /opt/cartesi/bin/cartesi-machine --load=/tmp/save_and_load_test

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Run test suite
        run: /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests run

      - name: Run test scripts
        run: |
          export PATH=/opt/cartesi/bin:$PATH
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export CARTESI_TESTS_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          for x in `cat tests/autorun`; do echo -n 'CTSICTSI' | lua5.4 tests/$x local; done

      - name: Run grpc lua test scripts
        run: |
          export PATH=/opt/cartesi/bin:$PATH
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export CARTESI_TESTS_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          ./tests/test-grpc-server.sh remote-cartesi-machine cartesi-machine cartesi-machine-tests $CARTESI_TESTS_PATH

      - name: Run jsonrpc lua test scripts
        run: |
          export PATH=/opt/cartesi/bin:$PATH
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export CARTESI_TESTS_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          ./tests/test-jsonrpc-server.sh jsonrpc-remote-cartesi-machine cartesi-machine cartesi-machine-tests $CARTESI_TESTS_PATH

      - name: Run Merkle tree tests
        run: |
         ./tests/test-merkle-tree-hash --log2-root-size=30 --log2-leaf-size=12 --input=tests/test-merkle-tree-hash

      - name: Run C API tests
        run: |
          export PATH=/opt/cartesi/bin:$PATH
          ./tests/test-machine-c-api

  uarch-test:
    name: Microarchitecture Test
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libboost-context1.74.0 libboost-coroutine1.74.0 libboost-filesystem1.74.0 libssl1.1 libc-ares2 zlib1g lua5.4 lua-socket liblua5.4-dev luarocks libb64-dev libcrypto++-dev nlohmann-json3-dev

      - name: Install lua test dependencies
        run: |
          sudo luarocks install --lua-version=5.4 luaposix

      - name: Download emulator
        uses: actions/download-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

      - name: Fix install directories and permissions [/opt/cartesi]
        run: |
          find /opt/cartesi -type d -exec chmod 755 {} +
          find /opt/cartesi -type f -exec chmod 644 {} +
          find /opt/cartesi/bin -type f \! -iname "*.lua" -exec chmod 755 {} +
          find /opt/cartesi/lib -type f -exec chmod 755 {} +

      - name: Test microarchitecture interpreter
        run: |
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          make riscv-arch-tests JOBS=$(nproc)

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Run test suite
        run: /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests run

      - name: Run rv64ui test suite on microarchitecture
        run: /opt/cartesi/bin/uarch-riscv-tests --test-path=/opt/cartesi/tests run

      - name: Create uarch json logs to be used  to test the Solidity based microarchitecture interpreter
        run: |
          mkdir -p /tmp/uarch-riscv-tests-json-logs
          /opt/cartesi/bin/uarch-riscv-tests --test-path=/opt/cartesi/tests --output-dir=/tmp/uarch-riscv-tests-json-logs json-logs

      - name: Upload uarch json logs to be used  to test the Solidity based microarchitecture interpreter
        uses: actions/upload-artifact@master
        with:
          name: uarch-riscv-tests-json-logs
          path: /tmp/uarch-riscv-tests-json-logs

      - name: Run test suite with Microarchitecture
        run: /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests --uarch-ram-length=0x20000 --uarch-ram-image=/opt/cartesi/share/images/uarch-ram.bin --jobs=$(nproc) run_uarch

      - name: Run test suite with microarchitecture and host based interpreters comparing machine hashes at every step
        # Running a smaller test set. We can decide later if/when/ how to run the full set
        run: /opt/cartesi/bin/cartesi-machine-tests  --test="^rv64[usm][imfd]%-p%-.*$" --test-path=/opt/cartesi/tests --uarch-ram-length=0x20000 --uarch-ram-image=/opt/cartesi/share/images/uarch-ram.bin --jobs=$(nproc) run_host_and_uarch

  static-analysis:
    name: Static Analysis
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libreadline-dev libboost-context-dev libboost-coroutine-dev libboost-filesystem-dev libssl-dev libc-ares-dev zlib1g-dev ca-certificates patchelf automake cmake clang-tidy-14 clang-format-14 lua5.4 liblua5.4-dev lua-socket libb64-dev libcrypto++-dev nlohmann-json3-dev

      - name: Download cache of third-party build
        run: aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION} ./build && test -f ./build/`uname`_`uname -m`/lib/libcryptopp.so.7
        id: download_cache
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Fix build dependencies permissions
        run: chmod +x ./build/`uname`_`uname -m`/bin/protoc ./build/`uname`_`uname -m`/bin/grpc_cpp_plugin

      - name: Setup update-alternatives for clang-format
        run: sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-14 120

      - name: Check format
        run: make check-format

      - name: Setup update-alternatives for clang-tidy
        run: sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-14 120

      - name: Lint
        run: make lint -j$(nproc)

  coverage:
    name: Coverage
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential libreadline-dev libboost-context-dev libboost-coroutine-dev libboost-filesystem-dev libssl-dev libc-ares-dev zlib1g-dev ca-certificates patchelf automake cmake clang-tidy-14 clang-format-14 lua5.4 liblua5.4-dev luarocks lua-socket clang llvm lcov libb64-dev libcrypto++-dev nlohmann-json3-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12
          sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-12 12
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-12 12
          gcc -v
          g++ -v

      - name: Install lua test dependencies
        run: |
          sudo luarocks install --lua-version=5.4 md5
          sudo luarocks install --lua-version=5.4 luaposix

      - name: Download cache of third-party build
        run: aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION} ./build && test -f ./build/`uname`_`uname -m`/lib/libcryptopp.so.7
        id: download_cache
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build third-party dependencies
        id: build_dep
        if: ${{ steps.download_cache.outcome == 'failure' }}
        run: make -j$(nproc) dep

      - name: Fix build dependencies permissions
        run: chmod +x ./build/`uname`_`uname -m`/bin/protoc ./build/`uname`_`uname -m`/bin/grpc_cpp_plugin

      - name: Cache third-party build
        if: ${{ steps.build_dep.outcome == 'success' }}
        run: aws s3 sync ./build s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs-${{ env.ROOTFS_VERSION }}.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: linux-${{ env.LINUX_VERSION }}.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom-${{ env.ROM_VERSION }}.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Create images folder
        run: mkdir -m 755 -p /opt/cartesi/share/images

      - name: Move images to cartesi images folder
        run: |
          mv rom-*.bin linux-*.bin rootfs-*.ext2 /opt/cartesi/share/images/
          cd /opt/cartesi/share/images/ && ln -s linux-${{ env.LINUX_VERSION }}.bin linux.bin
          cd /opt/cartesi/share/images/ && ln -s rom-${{ env.ROM_VERSION }}.bin rom.bin
          cd /opt/cartesi/share/images/ && ln -s rootfs-${{ env.ROOTFS_VERSION }}.ext2 rootfs.ext2

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Build
        run: make -j$(nproc) coverage-toolchain=gcc

      - name: Build uarch-based interpreter
        run: make uarch-with-toolchain

      - name: Install [/opt/cartesi]
        run: make install

      - name: Fix install permissions [/opt/cartesi]
        run: find /opt/cartesi -type d -exec chmod 755 {} +

      - name: Run coverage
        run: |
          export TEST_PATH=/opt/cartesi/tests
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export CARTESI_TESTS_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          make -j1 coverage-toolchain=gcc coverage

      - name: Show coverage summary
        run: cat src/coverage.txt

      - name: Show uncovered lines
        run: grep -F -e "=====:" -e "#####:" src/*.gcov

      - name: Upload coverage detailed report
        uses: actions/upload-artifact@master
        with:
          name: coverage-report
          path: src/coverage-gcc

      #- name: Coveralls
      #  uses: coverallsapp/github-action@1.1.3
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    path-to-lcov: ./src/coverage.info

  sanitize:
    name: Sanitize
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential libreadline-dev libboost-context-dev libboost-coroutine-dev libboost-filesystem-dev libssl-dev libc-ares-dev zlib1g-dev ca-certificates patchelf automake cmake clang-tidy-14 clang-format-14 lua5.4 liblua5.4-dev luarocks lua-socket clang llvm lcov libb64-dev libcrypto++-dev nlohmann-json3-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12
          sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-12 12
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-12 12
          gcc -v
          g++ -v

      # We also need to preload libstdc++ to workaround issue https://github.com/google/sanitizers/issues/934 in Ubuntu
      - name: Patch libasan.so
        run: sudo patchelf --add-needed `gcc -print-file-name=libstdc++.so` `gcc -print-file-name=libasan.so`

      - name: Install lua test dependencies
        run: |
          sudo luarocks install --lua-version=5.4 md5
          sudo luarocks install --lua-version=5.4 luaposix

      - name: Download cache of third-party build
        run: aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION} ./build && test -f ./build/`uname`_`uname -m`/lib/libcryptopp.so.7
        id: download_cache
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build third-party dependencies
        id: build_dep
        if: ${{ steps.download_cache.outcome == 'failure' }}
        run: make -j$(nproc) dep

      - name: Fix build dependencies permissions
        run: chmod +x ./build/`uname`_`uname -m`/bin/protoc ./build/`uname`_`uname -m`/bin/grpc_cpp_plugin

      - name: Cache third-party build
        if: ${{ steps.build_dep.outcome == 'success' }}
        run: aws s3 sync ./build s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs-${{ env.ROOTFS_VERSION }}.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: linux-${{ env.LINUX_VERSION }}.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom-${{ env.ROM_VERSION }}.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Create images folder
        run: mkdir -m 755 -p /opt/cartesi/share/images

      - name: Move images to cartesi images folder
        run: |
          mv rom-*.bin linux-*.bin rootfs-*.ext2 /opt/cartesi/share/images/
          cd /opt/cartesi/share/images/ && ln -s linux-${{ env.LINUX_VERSION }}.bin linux.bin
          cd /opt/cartesi/share/images/ && ln -s rom-${{ env.ROM_VERSION }}.bin rom.bin
          cd /opt/cartesi/share/images/ && ln -s rootfs-${{ env.ROOTFS_VERSION }}.ext2 rootfs.ext2

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Build
        run: make sanitize=yes -j$(nproc)

      - name: Build uarch-based interpreter
        run: make uarch-with-toolchain

      - name: Install [/opt/cartesi]
        run: make install

      - name: Fix install permissions [/opt/cartesi]
        run: find /opt/cartesi -type d -exec chmod 755 {} +

      - name: Run tests with sanitizer
        run: |
          export TEST_PATH=/opt/cartesi/tests
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export CARTESI_TESTS_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          make sanitize=yes test-all

  verify:
    name: Verify
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 600
    if: ${{ contains(github.ref, '-rc') || endsWith(github.ref, 'verify') }}
    steps:
      - name: Download emulator
        uses: actions/download-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

      - name: Create images folder
        run: mkdir -m 755 -p /opt/cartesi/share/images

      - name: Fix install directories and permissions [/opt/cartesi]
        run: |
          find /opt/cartesi -type d -exec chmod 755 {} +
          find /opt/cartesi -type f -exec chmod 644 {} +
          find /opt/cartesi/bin -type f \! -iname "*.lua" -exec chmod 755 {} +
          find /opt/cartesi/lib -type f -exec chmod 755 {} +

      - name: Install Ubuntu dependencies
        run: sudo apt-get update -y && sudo apt-get install -y libboost-coroutine1.74.0 libboost-context1.74.0 libboost-filesystem1.74.0 libreadline8 openssl libc-ares2 zlib1g ca-certificates libgomp1 lua5.4 liblua5.4-dev lua-socket libb64-dev libcrypto++-dev nlohmann-json3-dev

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Checkout emulator source code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Download ground truth logs cache
        id: download_ground_truth_logs
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          mkdir -p ./src/ground-truth
          aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/logs-${GROUND_TRUTH_VERSION} ./src/ground-truth/logs && test -f ./src/ground-truth/logs/1/dont_write_x0.json.br

      - name: Generate test machine initial state
        id: gen_init_state
        if: ${{ steps.download_ground_truth_logs.outcome == 'failure' }}
        run: |
          mkdir -p ./src/ground-truth/machine-init-state && cd ./src/ground-truth/machine-init-state
          /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests dump
          /opt/cartesi/bin/cartesi-machine-tests --json-test-list list > test_list.json
          rm -f 0000000080000000*.bin
          cd .. && tar -czf machine-init-state.tar.gz ./machine-init-state

      - name: Upload test machine initial state
        if: ${{ steps.gen_init_state.outcome == 'success' }}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp ./src/ground-truth/machine-init-state.tar.gz s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/machine-init-state-${GROUND_TRUTH_VERSION}.tar.gz

      - name: Generate ground truth logs
        id: gen_logs
        if: ${{ steps.download_ground_truth_logs.outcome == 'failure' }}
        run: |
          export PATH=/opt/cartesi/bin:$PATH
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export TEST_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          cd ./src
          make -j$(nproc) CYCLE_PERIOD=1 truth-logs

      - name: Upload ground truth logs
        if: ${{ steps.gen_logs.outcome == 'success' }}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 sync ./src/ground-truth/logs s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/logs-${GROUND_TRUTH_VERSION}

      - name: Verify logs against ground truth
        run: |
          export PATH=/opt/cartesi/bin:$PATH
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export TEST_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          cd ./src
          make -j$(nproc) CYCLE_PERIOD=1 test-logs

      - name: Download ground truth hashes cache
        id: download_ground_truth_hashes
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          mkdir -p ./src/ground-truth
          aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/hashes-${GROUND_TRUTH_VERSION} ./src/ground-truth/hashes && test -f ./src/ground-truth/hashes/1/dont_write_x0.hashes

      - name: Generate ground truth hashes
        id: gen_hashes
        if: ${{ steps.download_ground_truth_hashes.outcome == 'failure' }}
        run: |
          export PATH=/opt/cartesi/bin:$PATH
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export TEST_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          cd ./src
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=1 truth-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=2 truth-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=3 truth-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=13 truth-hashes

      - name: Upload ground truth logs and hashes cache
        if: ${{ steps.gen_hashes.outcome == 'success' }}
        run: aws s3 sync ./src/ground-truth/hashes s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/hashes-${GROUND_TRUTH_VERSION}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Verify hashes against ground truth
        run: |
          export PATH=/opt/cartesi/bin:$PATH
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export TEST_PATH=/opt/cartesi/tests
          export LUA_PATH_5_4="/opt/cartesi/share/lua/5.4/?.lua;;"
          export LUA_CPATH_5_4="/opt/cartesi/lib/lua/5.4/?.so;;"
          cd ./src
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=1 test-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=2 compare-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=3 compare-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=13 compare-hashes

  ubuntu-image-build:
    name: Build and Test Ubuntu based Docker image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout emulator source code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Ubuntu based docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          file: .github/workflows/Dockerfile
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator:devel
          push: false
          load: true
          cache-from: type=gha,mode=max,scope=ubuntu
          cache-to: type=gha,scope=ubuntu
          build-args: RELEASE=${{ (startsWith(github.ref, 'refs/tags/v') && 'yes' || 'no') }} GIT_COMMIT=${GITHUB_SHA}

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs-${{ env.ROOTFS_VERSION }}.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: linux-${{ env.LINUX_VERSION }}.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom-${{ env.ROM_VERSION }}.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Move images to cartesi images folder
        run: |
          mkdir -m 755 -p /opt/cartesi/share/images
          mv rom-*.bin linux-*.bin rootfs-*.ext2 /opt/cartesi/share/images/
          cd /opt/cartesi/share/images/ && ln -s linux-${{ env.LINUX_VERSION }}.bin linux.bin
          cd /opt/cartesi/share/images/ && ln -s rom-${{ env.ROM_VERSION }}.bin rom.bin
          cd /opt/cartesi/share/images/ && ln -s rootfs-${{ env.ROOTFS_VERSION }}.ext2 rootfs.ext2

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Simple boot inside the docker image (Ubuntu)
        run: docker run --rm -v /opt/cartesi/share/images:/opt/cartesi/share/images -t ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator:devel /opt/cartesi/bin/cartesi-machine /bin/true

      - name: Run test suite inside the docker image (Ubuntu)
        run: docker run --rm -v /opt/cartesi/tests:/opt/cartesi/tests -t ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator:devel /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests run

  publish_images:
    name: Publish Docker images
    needs: [static-analysis, coverage, sanitize, test, uarch-test, ubuntu-image-build]
    runs-on: ubuntu-22.04
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout emulator source code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Setup ubuntu docker image tags
        id: ubuntu_docker_image_tags
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Ubuntu based docker image
        id: ubuntu_docker_build
        uses: docker/build-push-action@v4
        with:
          file: .github/workflows/Dockerfile
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.ubuntu_docker_image_tags.outputs.tags }}
          push: true
          load: false
          cache-from: type=gha,mode=max,scope=ubuntu
          cache-to: type=gha,scope=ubuntu
          build-args: RELEASE=${{ (startsWith(github.ref, 'refs/tags/v') && 'yes' || 'no') }} GIT_COMMIT=${GITHUB_SHA}

  release:
    name: Release machine emulator tarball
    needs: [static-analysis, coverage, sanitize, test, uarch-test, ubuntu-image-build]
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download emulator
        uses: actions/download-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

      - name: Recreate images folder before packaging
        run: mkdir -m 755 -p /opt/cartesi/share/images

      - name: Fix install permissions [/opt/cartesi]
        run: |
          find /opt/cartesi -type d -exec chmod 755 {} +
          find /opt/cartesi -type f -exec chmod 644 {} +
          find /opt/cartesi/bin -type f \! -iname "*.lua" -exec chmod 755 {} +
          find /opt/cartesi/lib -type f -exec chmod 755 {} +

      - name: Download uarch json logs to be used  to test the Solidity based microarchitecture interpreter
        uses: actions/download-artifact@master
        with:
          name: uarch-riscv-tests-json-logs
          path: /tmp/uarch-riscv-tests-json-logs

      - name: Create uarch json logs TAR
        run: tar -czf uarch-riscv-tests-json-logs-${GITHUB_REF:10}.tar.gz -C /tmp/uarch-riscv-tests-json-logs .

      - name: Create TAR
        run: tar -czf machine-emulator-`uname`-${GITHUB_REF:10}.tar.gz -C /opt/cartesi .

      - name: Upload TAR to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            machine-emulator-*.tar.gz
            uarch-riscv-tests-json-logs-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
